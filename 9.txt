1)****************************************************************************


#include<stdio.h>
#include<string.h>
#include<stdlib.h>

int stat[10],tran[20][20],finalstate[20];
int nextstate,fs,ips,init,i,j,k,m;
char sym[10],ch,str[10],a[10];

void state(void);
void symbol(void);
void transition(void);
void initial(void);
void final(void);
void run(void);
void display(void);

int main()
{
	char choice;
	do
	{
		printf("\n A:ADD:Read DFA");
		printf("\n R:RUN:Check acceptance of given string");
		printf("\n T:TRANSITION:show transition table");
		printf("\n Q:QUIT:quit simulator");
		printf("\n Enter the choice:");
		scanf("%s",&choice);
		switch(tolower(choice))
		{
			
			case 'a' : state();
				   symbol();
				   transition();
				   initial();
				   final();
				   break;
			 
			case 'r' : run();
				   break;
			
			case 't' : display();
				   break;
			 
			case 'q' : exit(0);
				   break;
		}
	}
	while(choice!='q');
	return 0;
}

void state()
{
	printf("\n Enter the number of states:");
	scanf("%d",&ips);
	for(i=0;i<ips;i++)
	{
		printf("\n Give %d state:q",i+1);
		scanf("%d",&stat[i]);
	}
}

void symbol()
{
	printf("\n Give the number of input symbols:");
	scanf("%d",&m);
	for(i=0;i<m;i++)
	{
		printf("\n Give symbol number %d",i+1);
		scanf("%s",&sym[i]);
	}
}

void transition()
{
	printf("\n Give transition by specifying state number");
	for(i=0;i<ips;i++)
	{
		for(j=0;j<m;j++)
		{
			printf("\n trnsition from q[%d] over symbol %c is to state :q",i,sym[j]);
			scanf("%d",&tran[i][j]);
		}
	}
}

void initial()
{
	printf("\n Give initial state:q");
	scanf("%d",&init);
}

void final()
{
	printf("\n Give number of final states:");
	scanf("%d",&fs);
	for(i=0;i<fs;i++)
	{
		printf("\n Give  number of final states:q",i+1);
		scanf("%d",&finalstate[i]);
	}
}

void run() 
{
	int tag=0;
	do{
		printf("\n Entert the input string:");
		scanf("%s",&str);
		i=init;
		for(k=0;k<strlen(str);k++)
		{
			for(j=0;j<m;j++) 
			{
				if(str[k]==sym[j])
					break;
			}
			nextstate=tran[i][j];
			i=nextstate;
		}
		for(j=0;j<fs;j++) 
		{
			if(i==finalstate[j])
				tag=1;
		}
		if(tag==1)
		{
			printf("\n Given string is accepted");
			tag=0;
		}
		else
		{	
			printf("\n Given string is rejected");
			tag=0;
		}
		printf("\n Doyou want to continue?(y/n):");
		scanf("%s",&ch);
	}
	while(ch!='n');
}

void display()
{
	printf("\n The nDFA is as given below");
	printf("\n Q={");
	for(i=0;i<ips;i++) 
	{
		printf("q[%d],",stat[i]);
	}
	printf("}");
	printf("\n inp Symbols={");
	for(i=0;i<m;i++)
	{
		printf("%c,",sym[i]);
	}
	printf("}");
	printf("\n F={");
	for(i=0;i<fs;i++) 
	{
		printf("q[%d]",finalstate[i]);
	}
	printf("}");
	printf("\n initial state={q[%d]}",init);
	printf("\n transition function \n");
	printf("\n\t %c",235);
	for(i=0;i<m;i++)
		printf("\t %c",sym[i]);
	printf("\n");

	for(i=0;i<ips;i++) 
	{
		printf("\t q[%d]",stat[i]);
		for(j=0;j<m;j++) 
		{
			printf("\t q[%d]",tran[i][j]);
		}
		printf("\n");
	}
}



2)****************************************************************************


#include<stdio.h>
int n,nf;
int in[100];
int p[50];
int hit=0;
int i,j,k;
int pgfaultcnt=0;

void getData()
{
    printf("\nEnter length of page reference sequence:");
    scanf("%d",&n);
    printf("\nEnter the page reference sequence:");
    for(i=0; i<n; i++)
        scanf("%d",&in[i]);
    printf("\nEnter no of frames:");
    scanf("%d",&nf);
}

void initialize()
{
    pgfaultcnt=0;
    for(i=0; i<nf; i++)
        p[i]=9999;
}

int isHit(int data)
{
    hit=0;
    for(j=0; j<nf; j++)
    {
        if(p[j]==data)
        {
            hit=1;
            break;
        }

    }

    return hit;
}

int getHitIndex(int data)
{
    int hitind;
    for(k=0; k<nf; k++)
    {
        if(p[k]==data)
        {
            hitind=k;
            break;
        }
    }
    return hitind;
}

void dispPages()
{
    for (k=0; k<nf; k++)
    {
        if(p[k]!=9999)
            printf(" %d",p[k]);
    }

}

void dispPgFaultCnt()
{
    printf("\nTotal no of page faults:%d",pgfaultcnt);
}

void fifo()
{
    initialize();
    for(i=0; i<n; i++)
    {
        printf("\nFor %d :",in[i]);

        if(isHit(in[i])==0)
        {

            for(k=0; k<nf-1; k++)
                p[k]=p[k+1];

            p[k]=in[i];
            pgfaultcnt++;
            dispPages();
        }
        else
            printf("No page fault");
    }
    dispPgFaultCnt();
}
int main()
{
    int choice;
    while(1)
    {
        printf("\nPage Replacement Algorithms\n1.Enter data\n2.FIFO\n3.Exit\nEnter your choice:");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            getData();
            break;
        case 2:
            fifo();
            break;
 
        default:
            return 0;
            break;
        }
    }
}

